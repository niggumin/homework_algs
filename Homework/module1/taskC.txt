// Task B
// ВНИМАНИЕ! Для решения данной задачи нужно использовать структуру данных стек!
// Дана последовательность, состоящая из символов '(' и ')'.
// Требуется определить, является ли данная последовательность правильной скобочной последовательностью.
// Длина исходной последовательности ≤ 800000.



#include <iostream>
#include <sstream>
#include <cassert>

class Stack{
private:
    char* stack;
    int size;
    int pointer;

    void resize(int newSize){
        char* newStack = new char[newSize];
        for (int i = 0; i <= pointer; ++i)
            newStack[i] = stack[i];

        delete[] stack;
        stack = newStack;
        size = newSize;
    }

    bool isFull(){
        return pointer + 1 >= size;
    }

public:
    Stack()
    : stack(nullptr), pointer(-1), size(0) {}

    Stack(const Stack &other) = delete;
    Stack& operator=(const Stack &other) = delete;

    ~Stack(){
        delete[] stack;
    }

    void push(char val){
        if (isFull())
            resize(size == 0 ? 1 : 2 * size);

        stack[++pointer] = val;
    }

    char pop(){
        if (isEmpty()) return -1;
        return stack[pointer--];
    }

    char peak(){
        if (isEmpty()) return -1;
        return stack[pointer];
    }

    bool isEmpty(){
        return pointer == -1;
    }
};

bool isRightSequence(const std::string& str){
    Stack stack;
    for (int i = 0; i < str.length(); ++i){
        if (str[i] == '(')
            stack.push(str[i]);
        else if (str[i] == ')') {
            if (stack.isEmpty()) return false;
            stack.pop();
        }
    }
    return stack.isEmpty();
}

void run(std::istream &input, std::ostream &output){
    std::string str;
    std::getline(input, str);

    
    isRightSequence(str) ? output << "YES" << std::endl : output << "NO" << std::endl;
}

int main() {
    
    run(std::cin, std::cout);
    return 0;
}

